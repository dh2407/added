create type "public"."QuestionType" as enum ('MULTIPLE_CHOICE_QUESTION', 'FILL_IN_THE_BLANKS_QUESTION');

create table "public"."Question" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "type" "QuestionType",
    "props" json
);


alter table "public"."Question" enable row level security;

create table "public"."QuestionToSubjectLink" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "label" text,
    "subjectId" bigint,
    "questionId" bigint
);


alter table "public"."QuestionToSubjectLink" enable row level security;

CREATE UNIQUE INDEX "QuestionToSubjectLink_pkey" ON public."QuestionToSubjectLink" USING btree (id);

CREATE UNIQUE INDEX "Question_pkey" ON public."Question" USING btree (id);

alter table "public"."Question" add constraint "Question_pkey" PRIMARY KEY using index "Question_pkey";

alter table "public"."QuestionToSubjectLink" add constraint "QuestionToSubjectLink_pkey" PRIMARY KEY using index "QuestionToSubjectLink_pkey";

alter table "public"."QuestionToSubjectLink" add constraint "public_QuestionToSubjectLink_questionId_fkey" FOREIGN KEY ("questionId") REFERENCES "Question"(id) not valid;

alter table "public"."QuestionToSubjectLink" validate constraint "public_QuestionToSubjectLink_questionId_fkey";

alter table "public"."QuestionToSubjectLink" add constraint "public_QuestionToSubjectLink_subjectId_fkey" FOREIGN KEY ("subjectId") REFERENCES "Subject"(id) not valid;

alter table "public"."QuestionToSubjectLink" validate constraint "public_QuestionToSubjectLink_subjectId_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_questions_of_subject()
 RETURNS TABLE(id bigint, title text, description text, questions json)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT
    s1.id,
    s1.title,
    s1.description,
    COALESCE(json_agg(
      json_build_object(
        'id', s2.id,
        'title', s2.title,
        'description', s2.description
      )
    ) FILTER (WHERE s2.id IS NOT NULL), '[]') AS children
  FROM
    "Subject" s1
  LEFT JOIN
    "QuestionToSubjectLink" qsl ON s1.id = qsl."subjectId"
  LEFT JOIN
    "Subject" s2 ON qsl."questionId" = s2.id
  WHERE NOT EXISTS (
    SELECT 1
    FROM "QuestionToSubjectLink" qsl_check
    WHERE s1.id = qsl_check."questionId"
  )
  GROUP BY
    s1.id, s1.title, s1.description;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_subject_with_questions_by_subject_id(subject_id bigint)
 RETURNS TABLE(id bigint, title text, description text, questions json)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT
    s1.id,
    s1.title,
    s1.description,
    COALESCE(json_agg(
      json_build_object(
        'id', q.id,
        'type', q.type::text,
        'props', q.props,
        'label', qsl.label
      )
    ) FILTER (WHERE q.id IS NOT NULL), '[]') AS questions
  FROM
    "Subject" s1
  LEFT JOIN
    "QuestionToSubjectLink" qsl ON s1.id = qsl."subjectId"
  LEFT JOIN
    "Question" q ON qsl."questionId" = q.id
  WHERE
    s1.id = subject_id
  GROUP BY
    s1.id, s1.title, s1.description;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_subjects_with_children()
 RETURNS TABLE(id bigint, title text, description text, children json)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT
    s1.id,
    s1.title,
    s1.description,
    COALESCE(json_agg(
      json_build_object(
        'id', s2.id,
        'title', s2.title,
        'description', s2.description
      )
    ) FILTER (WHERE s2.id IS NOT NULL), '[]') AS children
  FROM
    "Subject" s1
  LEFT JOIN
    "ParentChildSubjectsLink" pcsl ON s1.id = pcsl."parentId"
  LEFT JOIN
    "Subject" s2 ON pcsl."childId" = s2.id
  WHERE NOT EXISTS (
    SELECT 1
    FROM "ParentChildSubjectsLink" pcsl_check
    WHERE s1.id = pcsl_check."childId"
  )
  GROUP BY
    s1.id, s1.title, s1.description;
END;
$function$
;

grant delete on table "public"."Question" to "anon";

grant insert on table "public"."Question" to "anon";

grant references on table "public"."Question" to "anon";

grant select on table "public"."Question" to "anon";

grant trigger on table "public"."Question" to "anon";

grant truncate on table "public"."Question" to "anon";

grant update on table "public"."Question" to "anon";

grant delete on table "public"."Question" to "authenticated";

grant insert on table "public"."Question" to "authenticated";

grant references on table "public"."Question" to "authenticated";

grant select on table "public"."Question" to "authenticated";

grant trigger on table "public"."Question" to "authenticated";

grant truncate on table "public"."Question" to "authenticated";

grant update on table "public"."Question" to "authenticated";

grant delete on table "public"."Question" to "service_role";

grant insert on table "public"."Question" to "service_role";

grant references on table "public"."Question" to "service_role";

grant select on table "public"."Question" to "service_role";

grant trigger on table "public"."Question" to "service_role";

grant truncate on table "public"."Question" to "service_role";

grant update on table "public"."Question" to "service_role";

grant delete on table "public"."QuestionToSubjectLink" to "anon";

grant insert on table "public"."QuestionToSubjectLink" to "anon";

grant references on table "public"."QuestionToSubjectLink" to "anon";

grant select on table "public"."QuestionToSubjectLink" to "anon";

grant trigger on table "public"."QuestionToSubjectLink" to "anon";

grant truncate on table "public"."QuestionToSubjectLink" to "anon";

grant update on table "public"."QuestionToSubjectLink" to "anon";

grant delete on table "public"."QuestionToSubjectLink" to "authenticated";

grant insert on table "public"."QuestionToSubjectLink" to "authenticated";

grant references on table "public"."QuestionToSubjectLink" to "authenticated";

grant select on table "public"."QuestionToSubjectLink" to "authenticated";

grant trigger on table "public"."QuestionToSubjectLink" to "authenticated";

grant truncate on table "public"."QuestionToSubjectLink" to "authenticated";

grant update on table "public"."QuestionToSubjectLink" to "authenticated";

grant delete on table "public"."QuestionToSubjectLink" to "service_role";

grant insert on table "public"."QuestionToSubjectLink" to "service_role";

grant references on table "public"."QuestionToSubjectLink" to "service_role";

grant select on table "public"."QuestionToSubjectLink" to "service_role";

grant trigger on table "public"."QuestionToSubjectLink" to "service_role";

grant truncate on table "public"."QuestionToSubjectLink" to "service_role";

grant update on table "public"."QuestionToSubjectLink" to "service_role";


